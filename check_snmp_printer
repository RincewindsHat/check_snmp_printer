#!/usr/bin/perl
#########################################################
#                                                       #
#                                                       #
#      SNMP Printer Check Plugin for Icinga             #
#            Version 1.1.3 (January 20, 2020)           #
#                by Rob McLoughlin                      #
#         E-mail: rmcloughlin@outlook.com               #
#                                                       #
#                                                       #
# Based on:                                             #
# check_snmp_printer (Perl)                             #
#       Version 1.6 (September 08, 2014)                #
# ( by Franky Van Liedekerke                            #
#       E-mail: liedekef@telenet.be )                   #
#                                                       #
# Which was further based on:                           #
# check_snmp_printer.sh                                 #
#       Version 1.5 (January 15, 2010)                  #
# ( by Jason Leonard                                    #
#       E-mail: jason_leonard@yahoo.com )               #
#                                                       #
# Version History                                       #
#   - Refer to CHANGELOG.md                             #
#                                                       #
#       Like the original, this plugin is distributed   #
# under the GNU GPL license. You may re-destribute only #
# according to the terms of the GNU GPL.                #
#                                                       #
#########################################################
#########################################################
#                                                       #
# DEPENDS On                                            #
# Net::SNMP perl module                                 #
# Nagios plugins installed and located in lib64         #
#                                                       #
#########################################################

use strict;
use lib qw( /usr/lib64/nagios/plugins );
use utils qw( %ERRORS $TIMEOUT &print_revision &support &usage );
use Net::SNMP;
use Getopt::Long;
use Data::Dumper;


# globals
use vars qw(
  $PROGNAME $VERSION %procs $snmp $errstr $oid
  $opt_version $opt_help $opt_timeout $opt_host $opt_community
  $opt_snmpver $opt_warning $opt_critical $opt_messages $opt_model
  $opt_consum $opt_tray $opt_pagecount $opt_metric
);
my (@consumables,@status,@trays,@strays,@percentages,@mresults,@message,@measurables);
my ($state,$statuscode,$EXITSTRING);
my ($i,$tcount,$traynumber,$critcount,$warncount) = 0;

my %STATUS_CODE =
  ( 'UNKNOWN' => '3', 'OK' => '0', 'WARNING' => '1', 'CRITICAL' => '2' );

# config
$PROGNAME    = $0;
$VERSION     = '1.1.3';

# init options
$opt_version    = undef;
$opt_help       = undef;
$opt_timeout    = $TIMEOUT;
$opt_host       = undef;
$opt_community  = 'public';
$opt_snmpver    = 1;
$opt_warning    = 20; # warning percentage: if lower: warning
$opt_critical   = 5;  # critical percentage: if lower: critical
$opt_messages   = undef;
$opt_model      = undef;
$opt_consum     = undef;
$opt_tray       = undef;
$opt_pagecount  = undef;
$opt_metric     = undef;

# get options
Getopt::Long::Configure('bundling');
GetOptions(
  'V|version'           => \$opt_version,
  'h|help'              => \$opt_help,
  't|timeout=i'         => \$opt_timeout,
  'H|host=s'            => \$opt_host,
  'C|community=s'       => \$opt_community,
  'v|snmpver=s'         => \$opt_snmpver,
  'w|warning=i'         => \$opt_warning,
  'c|critical=i'        => \$opt_critical,
  'messages'            => \$opt_messages,
  'model'               => \$opt_model,
  'consum'              => \$opt_consum,
  'trays'               => \$opt_tray,
  'pagecount'           => \$opt_pagecount,
  'metric'              => \$opt_metric
) or do {
  print_usage();
  exit($ERRORS{'UNKNOWN'});
};

if($opt_version) {
  print_version();
  exit($ERRORS{'UNKNOWN'});
}

if($opt_help) {
  print_help();
  exit($ERRORS{'UNKNOWN'});
}

if(!$opt_host) {
  print "Host option not given\n";
  print_usage();
  exit($ERRORS{'UNKNOWN'});
}

# only use one of messages|model|consum|tray|pagecount options
my $count=0;
($opt_messages) && ($count++);
($opt_model) && ($count++);
($opt_consum) && ($count++);
(defined($opt_tray)) && ($count++);
($opt_pagecount) && ($count++);
if ($count>1) {
  print "Only use one of messages|model|consum|trays|pagecount options\n";
  print_help();
  exit($ERRORS{'UNKNOWN'});
}
if ($count<1) {
  print "Only use one of messages|model|consum|trays|pagecount options\n";
  print_help();
  exit($ERRORS{'UNKNOWN'});
}

sub print_usage {
  my $tab = ' ' x length($PROGNAME);
  print <<EOB
Usage:
 $PROGNAME -H host
 $tab [-C snmp_community] [-v snmp_version] [-t timeout]
 $PROGNAME --version
 $PROGNAME --help
EOB
}

sub print_version {
  print_revision($PROGNAME, $VERSION);
}

sub print_help {
  print_version();
  print <<EOB;

Check a printer through SNMP.

EOB

  print_usage();
  print <<EOB;

Required Arguments:
 -H, --host=HOST
    The name or address of the host running SNMP.
 --messages
    Print the messages of the printer
 --model
    Prints the model of the printer
 --pagecount
    Prints the number of pages printed
 --trays
    Checks trays for paper status.
 --consum
    Checks consumables for status.

Optional Arguments:
 -C, --community=STRING
    The community string of the SNMP agent. Default: public
 -v, --snmpver=STRING
    The version of snmp to use.  1 and 2 are supported. Default: 1
 -w, --warning=INTEGER
    The warning limit level to alert on.
 -c, --critical=INTEGER
    The critical limit level to alert on.
 -t, --timeout=INTEGER
    Number of seconds to wait for a response.
 --metric
    Converts output to metric.  Default: imperial
EOB
}

sub check_model {
        my ($pcheck) = @_;
        my ($oid,$result);
        my $MODEL="Uknown model";
        my $SERIAL="";

        if ($pcheck == 1 || $pcheck == 2) {
                $oid=".1.3.6.1.2.1.25.3.2.1.3.1";
                $result=$snmp->get_request(-varbindlist => [$oid]);
                ($result) && ($MODEL=$result->{$oid});
                if ($pcheck == 2) { return $MODEL; }
        }
        if ($pcheck == 1) {
                $oid=".1.3.6.1.2.1.43.5.1.1.17";
                $result=$snmp->get_request(-varbindlist => [$oid]);
                ($result) && ($SERIAL=$result->{$oid});
                $SERIAL =~ s/\"//g;

                print "$MODEL, Serial # $SERIAL\n";
        }
}

sub check_messages {
        my ($oid,$result);
        my $MESSAGES="";
        $oid=".1.3.6.1.2.1.43.18.1.1.8";
        $result = $snmp->get_entries(-columns => [$oid]);
        if(not defined($result)) {
                $oid=".1.3.6.1.2.1.43.16";
                $result = $snmp->get_entries(-columns => [$oid]);
        }
        foreach my $key (keys(%$result)) {
                $result->{$key} =~ s/\"//g;
                $result->{$key} =~ s/\n/\!/g;
                $MESSAGES .= $result->{$key};
        }
        if ($MESSAGES eq "") {
                $MESSAGES= "(Can't determine messages)";
        }
        print "$MESSAGES\n";
}

sub check_page_count {
        my ($oid,$result,$model,$t_oid,$c_oid,$m_oid,
            $m_a3_oid,$m_a4_oid,$c_a3_oid,$c_a4_oid,
            $m_a3,$m_a4,$c_a3,$c_a4,$MonoPagecount,$ColorPagecount);

        $model = check_model(2);

        if ($model =~ m/HP/) {
                $c_oid='.1.3.6.1.4.1.11.2.3.9.4.2.1.4.1.2.7.0';
                $m_oid='.1.3.6.1.4.1.11.2.3.9.4.2.1.4.1.2.6.0';
        }
        if ($model =~ m/Canon/) {
                $t_oid='.1.3.6.1.4.1.1602.1.11.1.3.1.4.101';
                $c_oid='.1.3.6.1.4.1.1602.1.11.1.3.1.4.105';
                $m_oid='.1.3.6.1.4.1.1602.1.11.1.3.1.4.108';
                $m_a3_oid='.1.3.6.1.4.1.1602.1.11.1.3.1.4.112';
                $m_a4_oid='.1.3.6.1.4.1.1602.1.11.1.3.1.4.113';
                $c_a3_oid='.1.3.6.1.4.1.1602.1.11.1.3.1.4.222';
                $c_a4_oid='.1.3.6.1.4.1.1602.1.11.1.3.1.4.223';
        }
        if ($model =~ m/Xerox/) {
                $c_oid='.1.3.6.1.4.1.253.8.53.13.2.1.6.1.20.33';
                $m_oid='.1.3.6.1.4.1.253.8.53.13.2.1.6.1.20.34';
        }
        if ($model =~ m/Lexmark/) {
                $c_oid='.1.3.6.1.4.1.641.2.1.5.3';
                $m_oid='.1.3.6.1.4.1.641.2.1.5.2';
        }

        $oid=".1.3.6.1.2.1.43.10.2.1.4.1.1";

        if (defined($snmp->get_request(-varbindlist => [$m_a3_oid]))) { $m_a3 = $snmp->get_request(-varbindlist => [$m_a3_oid]) }
        if (defined($snmp->get_request(-varbindlist => [$m_a4_oid]))) { $m_a4 = $snmp->get_request(-varbindlist => [$m_a4_oid]) }
        if (defined($snmp->get_request(-varbindlist => [$c_a3_oid]))) { $c_a3 = $snmp->get_request(-varbindlist => [$c_a3_oid]) }
        if (defined($snmp->get_request(-varbindlist => [$c_a4_oid]))) { $c_a4 = $snmp->get_request(-varbindlist => [$c_a4_oid]) }

        if (($m_a3 || $m_a4) > 0) {
                $MonoPagecount = $m_a3 + $m_a4;
        } else {
                $result=$snmp->get_request(-varbindlist => [$m_oid]);
                if(not defined($result)) {
                        $result=$snmp->get_request(-varbindlist => [$t_oid]);
                                if(not defined($result)) {
                                        $result=$snmp->get_request(-varbindlist => [$oid]);
                                        if(not defined($result)) {
                                                print "CRITICAL - snmp error: " . $snmp->error() . "\n";
                                                exit($ERRORS{'CRITICAL'});
                                        } else { $MonoPagecount=$result->{$oid}; }
                                } else { $MonoPagecount=$result->{$t_oid}; }
                } else { $MonoPagecount=$result->{$m_oid}; }
        }
        if (($c_a3 || $c_a4) > 0) {
                $ColorPagecount = $c_a3 + $c_a4;
        } else {
                $result=$snmp->get_request(-varbindlist => [$c_oid]);
                if(not defined($result)) {
                } else { $ColorPagecount=$result->{$c_oid}; }
        }
        $EXITSTRING = "Pagecount is $MonoPagecount Black-and-White";
        if ($ColorPagecount > 0) {
                $EXITSTRING.= ", $ColorPagecount Color";
        }
        $EXITSTRING.= "\n";
        $EXITSTRING.= "|Black-and-White=$MonoPagecount;;;;";
        if ($ColorPagecount > 0) {
                $EXITSTRING.= " Color=$ColorPagecount;;;;";
        }

}

sub get_consumables {
        my ($result,$Table,$Names,$CurCap,$MaxCap) = @_;
        my %tmpprs = ();
        my ($consumable, $curcap_pct);
        my ($puncher, $found) = 0;

        foreach my $key (keys(%$result)) {
                my($base, $index) = ($key =~ /($Table\.\d+\.\d+)\.(\d+)/);
                if($base eq $Names ) {
                        $result->{$key} =~ s/[^\w\s]//g;
                        $tmpprs{$index}{name} = $result->{$key};
                }
                if($base eq $CurCap) { $tmpprs{$index}{curcap} = $result->{$key}; }
                if($base eq $MaxCap) { $tmpprs{$index}{maxcap} = $result->{$key}; }
        }

        foreach my $key (keys(%tmpprs)) {
                my $name=$tmpprs{$key}{name};
                ($consumable = $name) =~ s/(\w+).*/$1/;
                if ($consumable eq "Canon") {
                        my @split = split(' ',$consumable = $name);
                        foreach my $cconsumable (@split) {
                                if ($cconsumable =~ m/Black|Yellow|Magenta|Cyan/) { $consumable = $cconsumable; }
                                else { next; }
                        }
                }
                my $curcap=$tmpprs{$key}{curcap};
                my $maxcap=$tmpprs{$key}{maxcap};

                if ($name =~ m/Drum|Waste Toner/) {
                        next;
                }

                if ($consumable =~ m/Black|Yellow|Magenta|Cyan/) { $consumable = $consumable." Toner"; }
                if ($consumable eq 'Magneta') { $consumable = "Magenta Toner"; }  # New HP OID has a typo
                if ($consumable eq 'Clean') { $consumable = $consumable." Rollers"; }
                if ($consumable eq 'Document') { $consumable = $consumable." Feeder Kit"; }
                if ($consumable eq 'Maintenance') { $consumable = $consumable." Kit"; }
                if ($consumable eq 'Transfer') { $consumable = $consumable." Unit"; }
                if ($consumable eq 'Stapler') { }
                if ($consumable eq 'Staples') { }
                if ($consumable eq 'Saddle') { $consumable = $consumable." Staples"; }
                if ($consumable eq 'Puncher') { $puncher = 1; $consumable = $consumable. " Waste"; }

                push (@consumables, $consumable);

                $found=1;
                if ($puncher == 1) {
                        if ($curcap > 99) {
                                $state = "CRITICAL";
                        } elsif ($curcap >= 96) {
                                $state = "WARNING";
                        } else {
                                $state = "OK";
                        }
                        push (@measurables, '1');
                        push (@percentages, $curcap);
                } else {
                        if ($maxcap>0 && $curcap>0) {
                                $curcap_pct=sprintf("%.2f",$curcap*100/$maxcap);
                                if ($curcap_pct<=$opt_critical) {
                                        # critical messages come first
                                        $state = "CRITICAL";
                                } elsif ($curcap_pct<=$opt_warning) {
                                        $state = "WARNING";
                                } else {
                                        $state = "OK";
                                }
                                push (@measurables, '1');
                                push (@percentages, $curcap_pct);
                        } elsif ($maxcap == 100 && $curcap == 0) {
                                $state = "CRITICAL";
                                push (@measurables, '1');
                                push (@percentages, 0);
                        } else {
                                $state = nonmeasurable($curcap,$name);
                                push (@percentages, $curcap);
                        }
                }
                $puncher = 0;
                push (@status, $state);
        }
}

sub nonmeasurable {
        my ($curcap,$name) = @_;

        # Our object is not measurable - it's either FULL or EMPTY (such as a punch dust box)
        # Let's report on it's status using appropriate terminology
        if ($curcap==-3) {
                $state = "OK";
        } elsif ($curcap==-2) {
                # The value (-2) means unknown
                if ($name =~ m/W2020A|W2021A|W2022A|W2023A/) { # HP Color LaserJet Pro M454dw Toner
                        $state = "CRITICAL";
                        push (@measurables, '1');
                } else { $state = "WARNING"; push (@measurables, '0'); }
        } elsif ($curcap==0) {
                # Something is empty!
                $state = "CRITICAL";
        }
        return $state;
}

sub prioritize_results {
        my ($metric) = @_;
        my ($mcount,$scode);

        if ((scalar @consumables) > 0) { $mcount = (scalar @consumables); }
        if ((scalar @strays) > 0) { $mcount = (scalar @strays); }

        $i = 0;

        while ($mcount > 0) {

                if ($status[$i] eq 'CRITICAL') { $scode = 1; }
                if ($status[$i] eq 'WARNING') { $scode = 2; }
                if ($status[$i] eq 'OK') { $scode = 3; }

                if ($metric eq "consumables") {
                        push @{ $mresults[$i] }, $scode, $status[$i], $consumables[$i], $message[$i];
                }
                if ($metric eq "trays") {
                        push @{ $mresults[$i] }, $scode, $status[$i], $strays[$i][0], $message[$i];
                }
                $mcount--;
                $i++;
        }

        @mresults = sort { $a->[0] cmp $b->[0] } @mresults;

        $i = 0;
        $mcount = (scalar @mresults);
        while ($mcount > 0) {
                print "$mresults[$i][1]: $mresults[$i][2]$mresults[$i][3]\n";
                $mcount--;
                $i++;
        }
}

sub check_consumables {
        my %pr_oids = (
                'Table'         => '.1.3.6.1.2.1.43.11.1.1',
                'Names'         => '.1.3.6.1.2.1.43.11.1.1.6.1',
                'CurCap'        => '.1.3.6.1.2.1.43.11.1.1.9.1',
                'MaxCap'        => '.1.3.6.1.2.1.43.11.1.1.8.1',
                'CTable'        => '.1.3.6.1.2.1.43.31.1.1',
                'CNames'        => '.1.3.6.1.2.1.43.31.1.1.5.1',
                'CCurCap'       => '.1.3.6.1.2.1.43.31.1.1.8.1',
                'CMaxCap'       => '.1.3.6.1.2.1.43.31.1.1.7.1'
        );
        my ($consumable,$measurable,$perfcount);
        my $pct_remaining = "";

        my $result = $snmp->get_entries(-columns => [$pr_oids{Names}, $pr_oids{CurCap}, $pr_oids{MaxCap}]);
        if(not defined($result)) {
                print "CRITICAL - snmp error: " . $snmp->error() . "\n";
                exit($ERRORS{'CRITICAL'});
        }

        my $cresult = $snmp->get_entries(-columns => [$pr_oids{CNames}, $pr_oids{CCurCap}, $pr_oids{CMaxCap}]);

        get_consumables($result, $pr_oids{Table}, $pr_oids{Names}, $pr_oids{CurCap}, $pr_oids{MaxCap});
        get_consumables($cresult, $pr_oids{CTable}, $pr_oids{CNames}, $pr_oids{CCurCap}, $pr_oids{CMaxCap});

        $tcount = (scalar @consumables);
        if (@percentages != 0 ) { $measurable = 1; }
        if ($measurable) {
                if ($consumables[0] eq "Puncher Waste") {
                        $pct_remaining = " is ".$percentages[0]. "% full.";
                } elsif ($consumables[0] eq "Stapler") {
                        $pct_remaining = "";
                } elsif ($percentages[$i] eq "-2") {
                        if ($measurables[$i] eq "0") {
                                $pct_remaining = " levels cannot be measured.";
                        } else { $pct_remaining = " is at 0% remaining."; }
                } else {
                        $pct_remaining = " is at ".$percentages[0]. "% remaining.";
                }
                push (@message, $pct_remaining);
        }
        my $perfcount = $tcount;
        if ($tcount > 1) {
                $tcount--;
                while ($tcount > 0) {
                        $i++;
                        if ($consumables[$i] eq "Waste") {
                                $tcount--;
                                next;
                        }
                        if ($measurable) {
                                if ($consumables[$i] eq "Puncher Waste") {
                                        $pct_remaining = " is ".$percentages[$i]. "% full.";
                                } elsif ($consumables[$i] eq "Stapler") {
                                        $pct_remaining = "";
                                } elsif ($percentages[$i] eq "-2") {
                                        if ($measurables[$i] eq "0") {
                                                $pct_remaining = " levels cannot be measured.";
                                        } else { $pct_remaining = " is at 0% remaining."; }
                                } else {
                                        $pct_remaining = " is at ".$percentages[$i]. "% remaining.";
                                }
                        }
                        push (@message, $pct_remaining);
                        $tcount--;
                }
        }
        prioritize_results('consumables');
        $i = 0;
        $EXITSTRING.= "|";
        while ($perfcount > 0) {
                if ($consumables[$i] eq "Waste") {
                        $i++;
                        $perfcount--;
                        next;
                }
                ($consumable = $consumables[$i]) =~ s/ /_/g;
                if ($measurable) {
                        if ($consumable eq "Stapler") {
                                if ($status[$i] eq 'CRITICAL') { $EXITSTRING.= $consumable."=0"; }
                                elsif ($status[$i] eq 'OK') { $EXITSTRING.= $consumable."=100"; }
                        } elsif ($percentages[$i] eq "-2") {
                                if ($measurables[$i] eq "0") { }
                                else { $EXITSTRING.= "$consumable=0"; }
                        } else {
                                $EXITSTRING.= $consumable."=".$percentages[$i];
                        }
                } else {
                        if ($status[$i] == "CRITICAL") {
                                $EXITSTRING.= $consumable."=0";
                        } else {
                                $EXITSTRING.= $consumable."=1";
                        }
                }
                $i++;
                $perfcount--;
                if ($perfcount == 0) { $EXITSTRING.= ";;;;"; } else { $EXITSTRING.=";;;; "; }
        }
}

sub check_paper_trays {
        my $found=0;
        my %tmpprs = ();
        my ($name,$cap,$tstatus,$traymessage,$maxcap,$feeddim,$xfeeddim);
        my %tray_oids = (
                'Table'         => '.1.3.6.1.2.1.43.8.2.1',
                'Cap'           => '.1.3.6.1.2.1.43.8.2.1.10.1',
                'Status'        => '.1.3.6.1.2.1.43.8.2.1.11.1',
                'MaxCap'        => '.1.3.6.1.2.1.43.8.2.1.9.1',
                'Name'          => '.1.3.6.1.2.1.43.8.2.1.13.1',
                'FeedDim'       => '.1.3.6.1.2.1.43.8.2.1.4.1',
                'FeedDimUnits'  => '.1.3.6.1.2.1.43.8.2.1.2.1',
                'XFeedDim'      => '.1.3.6.1.2.1.43.8.2.1.5.1',
                'XFeedDimUnits' => '.1.3.6.1.2.1.43.8.2.1.3.1'
        );
        my $result = $snmp->get_entries(-columns => [$tray_oids{Name},$tray_oids{Cap},$tray_oids{MaxCap},$tray_oids{FeedDim},$tray_oids{FeedDimUnits},$tray_oids{XFeedDim},$tray_oids{XFeedDimUnits},$tray_oids{Status}]);
        my $model = "Unknown Model";
        my $mresult = $snmp->get_request(-varbindlist => [".1.3.6.1.2.1.25.3.2.1.3.1"]);
        ($mresult) && ($model=$mresult->{".1.3.6.1.2.1.25.3.2.1.3.1"});

        if(not defined($result)) {
                print "CRITICAL - snmp error: " . $snmp->error() . "\n";
                exit($ERRORS{'CRITICAL'});
        }
        foreach my $key (keys(%$result)) {
                my($base, $index) = ($key =~ /($tray_oids{Table}\.\d+\.\d+)\.(\d+)/);
                $result->{$key} =~ s/\"//g;
                if($base eq $tray_oids{Cap}) { $tmpprs{$index}{cap}  = $result->{$key}; }
                if($base eq $tray_oids{Status}) { $tmpprs{$index}{tstatus}  = $result->{$key}; }
                if($base eq $tray_oids{MaxCap}) { $tmpprs{$index}{maxcap}  = $result->{$key}; }
                if($base eq $tray_oids{Name}) { $tmpprs{$index}{name} = $result->{$key}; }
                if($base eq $tray_oids{FeedDim}) { $tmpprs{$index}{feeddim} = $result->{$key}; }
                if($base eq $tray_oids{XFeedDim}) { $tmpprs{$index}{xfeeddim} = $result->{$key}; }
        }

        foreach my $key (keys(%tmpprs)) {
                $name=$tmpprs{$key}{name};
                $cap=$tmpprs{$key}{cap};
                $tstatus=$tmpprs{$key}{tstatus};
                $maxcap=$tmpprs{$key}{maxcap};
                $feeddim=$tmpprs{$key}{feeddim};
                $xfeeddim=$tmpprs{$key}{xfeeddim};

                # if name is empty, make one with the number
                if ($name eq "") {
                        $name="Tray $key";
                }
                if ($name =~ m/(MPT)/) {
                        $name =~ s/ \(MPT\)//g;
                }
                $name =~ s/\n/\!/g;
                $found=1;
                push @{ $trays[$traynumber] }, $name, $cap, $maxcap, $feeddim, $xfeeddim, $tstatus;
                $traynumber++;
        }

        @strays = sort { $a->[0] cmp $b->[0] } @trays;
        $tcount = scalar(@strays);
        my $perfcount = $tcount;

        while  ($tcount > 0) {
                $name           = $strays[$i][0];
                $cap            = $strays[$i][1];
                $maxcap         = $strays[$i][2];
                $feeddim        = $strays[$i][3];
                $xfeeddim       = $strays[$i][4];
                $tstatus        = $strays[$i][5];

                if ($feeddim eq '-2') { $feeddim = "Any"; }
                if ($xfeeddim eq '-2') { $xfeeddim = "Any"; }

                if (($feeddim || $xfeeddim) ne 'Any') {
                        if ($opt_metric) {
                                $feeddim = sprintf("%.0f", $feeddim * .001)."mm";
                                $xfeeddim = sprintf("%.0f", $xfeeddim * .001)."mm";
                        } else {
                                $feeddim = sprintf("%.2f", (($feeddim / 2.54) * .0001))."in";
                                $xfeeddim = sprintf("%.2f", (($xfeeddim / 2.54) * .0001))."in";
                        }
                }

                if ($cap == -3) {
                        # The value (-3) means that the printer knows that at least one unit remains.
                        $state = "OK";
                        $traymessage = " ($xfeeddim x $feeddim)";
                } elsif ($cap == -2) {
                        # The value (-2) means unknown
                        # so lets check the tray status instead
                        if ($tstatus eq '0') {
                                if ($model =~ m/Canon/) {
                                        $state = "OK";
                                        $traymessage = " ($xfeeddim x $feeddim)";
                                }
                                elsif ($model =~ m/HP/) {
                                        $state = "OK";
                                        $traymessage = " ($xfeeddim x $feeddim)";
                                } else {
                                        $state = "WARNING";
                                        $traymessage = " is in an UNKNOWN state.";
                                }
                                if (($name =~ m/Tray 1|Stack Bypass|MP Tray/) and ($state ne 'WARNING')) {
                                        $traymessage = "";
                                }
                        } elsif ($tstatus eq '9') {
                                if ($model =~ m/HP/) {
                                        $state = "OK";
                                        $traymessage = " ($xfeeddim x $feeddim)";
                                }
                        } else {
                                # still unknown so we'll mark it warning because we just don't know
                                $state = "WARNING";
                                $traymessage = " is in UNKNOWN status.";
                        }
                } elsif ($cap == 0) {
                        # 0 means there is no paper left! This is our only critical value.
                        # first lets check to see if it's a bypass tray, we'll always assume Tray 1 is such.
                        if ($name =~ m/Tray 1|Stack Bypass|MP Tray/) {
                                        $state = "OK";
                                        if (($xfeeddim || $feeddim) ne 'Any') {
                                                $traymessage = " ($xfeeddim x $feeddim)";
                                        } else { $traymessage = ""; }
                                } else {
                                        $state = "CRITICAL";
                                        $traymessage = " ($xfeeddim x $feeddim) is at 0% paper remaining.";
                                }
                } else {
                        ($maxcap==0) && ($maxcap=1);
                        my $cap_pct=sprintf("%.2f",$cap*100/$maxcap);
                        if ($cap_pct <= $opt_warning) {
                                $state = "WARNING";
                                $traymessage = " ($xfeeddim x $feeddim) is at $cap_pct% paper remaining.";
                        } else {
                                $state = "OK";
                                $traymessage = " ($xfeeddim x $feeddim)";
                        }
                }
                push (@status, $state);
                push (@message, $traymessage);
                $tcount--;
                $i++;
        }
        prioritize_results('trays');
        $i = 0;
        $EXITSTRING.= "|";
        while ($perfcount > 0) {
                (my $tray = $strays[$i][0]) =~ s/ /_/g;
                if ($status[$i] eq 'CRITICAL') { $EXITSTRING.= $tray."=0"; }
                if ($status[$i] eq 'WARNING') { $EXITSTRING.= $tray."=1"; }
                if ($status[$i] eq 'OK') { $EXITSTRING.= $tray."=2"; }
                $i++;
                $perfcount--;
                if ($perfcount == 0) { $EXITSTRING.= ";;;;"; } else { $EXITSTRING.=";;;; "; }
        }
}

# set alarm in case we hang
$SIG{ALRM} = sub {
  print "CRITICAL - Timeout after $opt_timeout seconds\n";
  exit($ERRORS{'CRITICAL'});
};
alarm($opt_timeout);

# connect to the snmp server
($snmp, $errstr) = Net::SNMP->session(
  -hostname  => $opt_host,
  -version   => $opt_snmpver,
  -community => $opt_community,
  -timeout   => $opt_timeout,
);
if (!$snmp) {
  print "Could not create SNMP session: $errstr\n";
  exit($ERRORS{'UNKNOWN'});
}

if ($opt_messages) {check_messages(); exit($ERRORS{'OK'});}
if ($opt_model) {check_model(1); exit($ERRORS{'OK'});}
if ($opt_pagecount) {check_page_count();}
if ($opt_consum) {check_consumables();}
if (defined($opt_tray)) {check_paper_trays($opt_tray);}

foreach $statuscode(@status) {
        if ($statuscode eq "CRITICAL") { $critcount++; }
        if (($statuscode eq "WARNING") && ($state ne "CRITICAL")) { $warncount++; }
}

if ($critcount > 0) { $state = "CRITICAL"; }
elsif ($warncount > 0) { $state = "WARNING"; }
else { $state = "OK"; }

stop($EXITSTRING, $state);
sub stop {
        my $result = shift;
        my $exit_code = shift;
        print $result . "\n";
        exit ( $STATUS_CODE{$exit_code} );
}
